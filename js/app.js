// ================================
// Sentiment Analysis App - Main Logic
// ================================

// ================================
// 1. L·∫§Y C√ÅC PH·∫¶N T·ª¨ HTML
// ================================
const textInput = document.getElementById('text-input');
const analyzeButton = document.getElementById('analyze-button');
const loadingMessage = document.getElementById('loading-message');
const resultsSection = document.getElementById('results-section');
const errorMessage = document.getElementById('error-message');
const errorText = document.getElementById('error-text');
const resetButton = document.getElementById('reset-button');
const retryButton = document.getElementById('retry-button');

// Elements cho tabs (M·ªöI - V2.0)
const tabButtons = document.querySelectorAll('.tab-button');
const imageInputContainer = document.getElementById('image-input-container');
const imageInput = document.getElementById('image-input');

// Elements cho stats cards
const sentimentIcon = document.getElementById('sentiment-icon');
const sentimentValue = document.getElementById('sentiment-value');
const entitiesCount = document.getElementById('entities-count');
const phrasesCount = document.getElementById('phrases-count');

// Elements cho detailed results
const sentimentBreakdown = document.getElementById('sentiment-breakdown');
const entitiesContainer = document.getElementById('entities-container');
const keyphrasesContainer = document.getElementById('keyphrases-container');

// Elements cho c√°c tr∆∞·ªùng m·ªõi (M·ªöI - V2.0)
const languageInfo = document.getElementById('language-info');
const piiContainer = document.getElementById('pii-container');
const syntaxContainer = document.getElementById('syntax-container');
const toxicityContainer = document.getElementById('toxicity-container');

// Bi·∫øn l∆∞u tr·∫°ng th√°i
let currentMode = 'text'; // 'text' ho·∫∑c 'image'
let selectedFile = null;

// ================================
// 2. TH√äM EVENT LISTENERS
// ================================
analyzeButton.addEventListener('click', handleAnalyze);
resetButton.addEventListener('click', resetApp);
retryButton.addEventListener('click', handleAnalyze);

// Tabs switching (M·ªöI - V2.0)
tabButtons.forEach(btn => {
    btn.addEventListener('click', handleTabSwitch);
});

// Image file selection (M·ªöI - V2.0)
imageInput.addEventListener('change', handleImageSelect);

// Shortcut: Ctrl + Enter ƒë·ªÉ ph√¢n t√≠ch
textInput.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.key === 'Enter') {
        handleAnalyze();
    }
});

// ================================
// 3. H√ÄM CH√çNH: X·ª¨ L√ù PH√ÇN T√çCH
// ================================
async function handleAnalyze() {
    // Ki·ªÉm tra mode hi·ªán t·∫°i
    if (currentMode === 'text') {
        await analyzeText();
    } else {
        await analyzeImage();
    }
}

// 3A. PH√ÇN T√çCH VƒÇN B·∫¢N (C·∫≠p nh·∫≠t endpoint - V2.0)
async function analyzeText() {
    // L·∫•y text t·ª´ textarea
    const text = textInput.value.trim();
    
    // Ki·ªÉm tra xem c√≥ text kh√¥ng
    if (!text) {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch!');
        textInput.focus();
        return;
    }
    
    // Hi·ªÉn th·ªã loading, ·∫©n results v√† errors
    showLoading();
    
    try {
        // Backend V2.0 expects: {"text": "your text here"}
        const requestPayload = {
            text: text
        };
        
        // T·∫°o JSON string
        const jsonBody = JSON.stringify(requestPayload);
        
        console.log('üì§ Sending text analysis request:');
        console.log('   Payload object:', requestPayload);
        console.log('   JSON string:', jsonBody);
        console.log('   JSON length:', jsonBody.length);
        
        // G·ªçi API m·ªõi: /analyze-text
        const response = await fetch(API_ENDPOINT_TEXT, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: jsonBody,
            mode: 'cors' // Explicitly set CORS mode
        });
        
        console.log('üì• Response received:', {
            status: response.status,
            statusText: response.statusText,
            headers: [...response.headers.entries()]
        });
        
        // Ki·ªÉm tra response
        if (!response.ok) {
            // Log chi ti·∫øt l·ªói
            const errorText = await response.text();
            console.error('‚ùå API Error Response:', {
                status: response.status,
                statusText: response.statusText,
                body: errorText
            });
            throw new Error(`API Error: ${response.status} - ${errorText.substring(0, 100)}`);
        }
        
        // Parse JSON - S·ª≠ d·ª•ng response.json() thay v√¨ text + parse
        const data = await response.json();
        console.log('‚úÖ Parsed response data:', data);
        
        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        displayResults(data);
        
    } catch (error) {
        // X·ª≠ l√Ω l·ªói
        console.error('Error:', error);
        showError(error.message);
    }
}

// 3B. PH√ÇN T√çCH H√åNH ·∫¢NH (M·ªöI - V2.0)
async function analyzeImage() {
    if (!selectedFile) {
        alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn ·∫£nh c·∫ßn ph√¢n t√≠ch!');
        return;
    }
    
    // Hi·ªÉn th·ªã loading
    showLoading();
    loadingMessage.querySelector('p').textContent = 'Uploading image and processing...';
    
    try {
        // B∆∞·ªõc 1: L·∫•y upload URL t·ª´ backend
        console.log('üì§ Step 1: Getting upload URL for:', selectedFile.name);
        const urlResponse = await fetch(
            `${API_ENDPOINT_GET_UPLOAD_URL}?fileName=${encodeURIComponent(selectedFile.name)}`
        );
        
        if (!urlResponse.ok) {
            throw new Error('Cannot get upload URL. Please try again.');
        }
        
        const { uploadURL, key } = await urlResponse.json();
        console.log('‚úÖ Got upload URL, key:', key);
        
        // B∆∞·ªõc 2: Upload ·∫£nh tr·ª±c ti·∫øp l√™n S3
        console.log('üì§ Step 2: Uploading image to S3...');
        loadingMessage.querySelector('p').textContent = 'Uploading image...';
        
        const uploadResponse = await fetch(uploadURL, {
            method: 'PUT',
            body: selectedFile
            // Kh√¥ng c·∫ßn th√™m headers khi d√πng presigned URL
            // URL ƒë√£ ch·ª©a t·∫•t c·∫£ th√¥ng tin c·∫ßn thi·∫øt
        });
        
        if (!uploadResponse.ok) {
            const errorText = await uploadResponse.text();
            console.error('‚ùå Upload failed:', {
                status: uploadResponse.status,
                statusText: uploadResponse.statusText,
                body: errorText
            });
            throw new Error(`Cannot upload image (${uploadResponse.status}). Please try again.`);
        }
        
        console.log('‚úÖ Image uploaded successfully');
        
        // B∆∞·ªõc 3: Poll k·∫øt qu·∫£ t·ª´ backend
        loadingMessage.querySelector('p').textContent = 'Analyzing image... (may take 30-60 seconds)';
        await pollImageResult(key);
        
    } catch (error) {
        console.error('Image analysis error:', error);
        showError(error.message);
    }
}

// 3C. POLLING K·∫æT QU·∫¢ PH√ÇN T√çCH ·∫¢NH (M·ªöI - V2.0)
async function pollImageResult(imageKey, attempts = 0) {
    const maxAttempts = 30; // 30 l·∫ßn x 3 gi√¢y = 90 gi√¢y
    const pollInterval = 3000; // 3 gi√¢y
    
    if (attempts >= maxAttempts) {
        showError('Processing timeout. Please try again or select another image.');
        return;
    }
    
    try {
        console.log(`üîç Polling attempt ${attempts + 1}/${maxAttempts}...`);
        
        const response = await fetch(`${API_ENDPOINT_GET_RESULT}/${imageKey}`);
        
        if (response.status === 404) {
            // Backend v·∫´n ƒëang x·ª≠ l√Ω
            const data = await response.json();
            if (data.status === 'PROCESSING') {
                console.log('‚è≥ Still processing, will retry in 3 seconds...');
                // C·∫≠p nh·∫≠t loading message
                loadingMessage.querySelector('p').textContent = 
                    `Processing... (${attempts + 1}/${maxAttempts})`;
                
                // Th·ª≠ l·∫°i sau 3 gi√¢y
                setTimeout(() => pollImageResult(imageKey, attempts + 1), pollInterval);
                return;
            }
        }
        
        if (!response.ok) {
            throw new Error(`Error getting result: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.status === 'COMPLETED') {
            console.log('‚úÖ Image analysis completed:', data);
            displayResults(data);
        } else if (data.status === 'FAILED') {
            showError('Processing failed: ' + (data.error || 'Unknown error'));
        } else {
            // Tr·∫°ng th√°i kh√¥ng x√°c ƒë·ªãnh, th·ª≠ l·∫°i
            setTimeout(() => pollImageResult(imageKey, attempts + 1), pollInterval);
        }
        
    } catch (error) {
        console.error('Polling error:', error);
        showError(error.message);
    }
}

// ================================
// 3D. X·ª¨ L√ù TAB SWITCHING (M·ªöI - V2.0)
// ================================
function handleTabSwitch(e) {
    const tab = e.target.dataset.tab;
    
    // C·∫≠p nh·∫≠t UI tabs
    tabButtons.forEach(btn => btn.classList.remove('active'));
    e.target.classList.add('active');
    
    // C·∫≠p nh·∫≠t mode
    currentMode = tab;
    
    // Hi·ªÉn th·ªã input t∆∞∆°ng ·ª©ng
    if (tab === 'text') {
        textInput.classList.remove('hidden');
        imageInputContainer.classList.add('hidden');
    } else {
        textInput.classList.add('hidden');
        imageInputContainer.classList.remove('hidden');
    }
    
    // Reset l·ªói v√† results
    resultsSection.classList.add('hidden');
    errorMessage.classList.add('hidden');
}

// ================================
// 3E. X·ª¨ L√ù CH·ªåN FILE (M·ªöI - V2.0)
// ================================
function handleImageSelect(e) {
    const file = e.target.files[0];
    
    if (!file) {
        selectedFile = null;
        return;
    }
    
    // Ki·ªÉm tra file type
    if (!file.type.startsWith('image/')) {
        alert('‚ö†Ô∏è Vui l√≤ng ch·ªçn file ·∫£nh (JPG, PNG, HEIC)');
        e.target.value = '';
        selectedFile = null;
        return;
    }
    
    // Ki·ªÉm tra file size (max 5MB)
    const maxSize = 5 * 1024 * 1024; // 5MB
    if (file.size > maxSize) {
        alert('‚ö†Ô∏è K√≠ch th∆∞·ªõc file qu√° l·ªõn. Vui l√≤ng ch·ªçn ·∫£nh d∆∞·ªõi 5MB.');
        e.target.value = '';
        selectedFile = null;
        return;
    }
    
    selectedFile = file;
    console.log('‚úÖ File selected:', file.name, `(${(file.size / 1024 / 1024).toFixed(2)}MB)`);
    
    // C·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã t√™n file
    const uploadText = document.querySelector('.upload-text');
    uploadText.textContent = `‚úì Selected: ${file.name}`;
    uploadText.style.color = 'var(--success)';
}

// ================================
// 4. HI·ªÇN th·ªã K·∫æT QU·∫¢
// ================================
function displayResults(data) {
    // ·∫®n loading
    loadingMessage.classList.add('hidden');
    
    // Hi·ªÉn th·ªã results section
    resultsSection.classList.remove('hidden');
    
    // Hi·ªÉn th·ªã stats cards
    displayStats(data);
    
    // Hi·ªÉn th·ªã sentiment breakdown
    displaySentiment(data);
    
    // Hi·ªÉn th·ªã entities
    displayEntities(data);
    
    // Hi·ªÉn th·ªã key phrases
    displayKeyPhrases(data);
    
    // Hi·ªÉn th·ªã c√°c tr∆∞·ªùng m·ªõi (V2.0)
    displayLanguageInfo(data);
    displayPII(data);
    displaySyntax(data);
    displayToxicity(data);
    
    // Scroll xu·ªëng results
    resultsSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
}

// ================================
// 5. HI·ªÇN TH·ªä STATS CARDS
// ================================
function displayStats(data) {
    // Sentiment
    const sentiment = data.sentiment || 'UNKNOWN';
    const sentimentScore = getSentimentScore(data.sentimentScores, sentiment);
    
    // Icons cho t·ª´ng sentiment
    const icons = {
        'POSITIVE': 'üòä',
        'NEGATIVE': 'üò¢',
        'NEUTRAL': 'üòê',
        'MIXED': 'üòï'
    };
    
    sentimentIcon.textContent = icons[sentiment] || '‚ùì';
    
    // Animate s·ªë t·ª´ 0 l√™n target value
    animateNumber(sentimentValue, 0, sentimentScore, 1000);
    sentimentValue.textContent = Math.round(sentimentScore) + '%';
    
    // Entities count (Backend tr·∫£ v·ªÅ detectedEntities)
    const entitiesLength = data.detectedEntities ? data.detectedEntities.length : 0;
    animateNumber(entitiesCount, 0, entitiesLength, 1000);
    
    // Key phrases count (Backend tr·∫£ v·ªÅ detectedKeyPhrases)
    const phrasesLength = data.detectedKeyPhrases ? data.detectedKeyPhrases.length : 0;
    animateNumber(phrasesCount, 0, phrasesLength, 1000);
}

// ================================
// 6. HI·ªÇN TH·ªä SENTIMENT BREAKDOWN
// ================================
function displaySentiment(data) {
    const scores = data.sentimentScores || {};
    
    // T·∫°o HTML cho m·ªói sentiment bar
    const sentiments = [
        { key: 'Positive', label: 'T√≠ch c·ª±c', class: 'positive' },
        { key: 'Negative', label: 'Ti√™u c·ª±c', class: 'negative' },
        { key: 'Neutral', label: 'Trung t√≠nh', class: 'neutral' },
        { key: 'Mixed', label: 'H·ªón h·ª£p', class: 'mixed' }
    ];
    
    let html = '';
    
    sentiments.forEach(sentiment => {
        const score = scores[sentiment.key] || 0;
        const percentage = (score * 100).toFixed(1);
        
        html += `
            <div class="sentiment-bar">
                <div class="sentiment-bar-header">
                    <span class="sentiment-bar-label">${sentiment.label}</span>
                    <span class="sentiment-bar-value">${percentage}%</span>
                </div>
                <div class="sentiment-bar-track">
                    <div class="sentiment-bar-fill ${sentiment.class}" 
                         data-width="${percentage}"></div>
                </div>
            </div>
        `;
    });
    
    sentimentBreakdown.innerHTML = html;
    
    // Animate bars sau khi render
    setTimeout(() => {
        document.querySelectorAll('.sentiment-bar-fill').forEach(bar => {
            bar.style.width = bar.dataset.width + '%';
        });
    }, 100);
}

// ================================
// 7. HI·ªÇN TH·ªä ENTITIES (B·∫¢NG)
// ================================
function displayEntities(data) {
    const entities = data.detectedEntities || [];
    
    if (entities.length === 0) {
        entitiesContainer.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y th·ª±c th·ªÉ n√†o.</p>';
        return;
    }
    
    // T·∫°o b·∫£ng HTML
    let html = `
        <table class="entities-table">
            <thead>
                <tr>
                    <th>VƒÉn b·∫£n</th>
                    <th>Lo·∫°i</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    entities.forEach(entity => {
        // Backend ch·ªâ tr·∫£ v·ªÅ {text, type}, kh√¥ng c√≥ score
        html += `
            <tr>
                <td><strong>${escapeHtml(entity.text)}</strong></td>
                <td><span class="entity-type">${entity.type}</span></td>
            </tr>
        `;
    });
    
    html += `
            </tbody>
        </table>
    `;
    
    entitiesContainer.innerHTML = html;
}

// ================================
// 8. HI·ªÇN TH·ªä KEY PHRASES (TAGS)
// ================================
function displayKeyPhrases(data) {
    const keyPhrases = data.detectedKeyPhrases || [];
    
    if (keyPhrases.length === 0) {
        keyphrasesContainer.innerHTML = '<p>Kh√¥ng t√¨m th·∫•y c·ª•m t·ª´ kh√≥a n√†o.</p>';
        return;
    }
    
    // T·∫°o tags HTML
    let html = '<div class="keyphrases-list">';
    
    keyPhrases.forEach(phrase => {
        // Backend ch·ªâ tr·∫£ v·ªÅ {text}, kh√¥ng c√≥ score
        html += `
            <span class="phrase-tag">
                <span>${escapeHtml(phrase.text)}</span>
            </span>
        `;
    });
    
    html += '</div>';
    
    keyphrasesContainer.innerHTML = html;
}

// ================================
// 8A. HI·ªÇN TH·ªä NG√îN NG·ªÆ & D·ªäCH THU·∫¨T (M·ªöI - V2.0)
// ================================
function displayLanguageInfo(data) {
    if (!languageInfo) return;
    
    let html = '';
    
    // Hi·ªÉn th·ªã ng√¥n ng·ªØ ph√°t hi·ªán
    if (data.detectedLanguage) {
        html += `<p>üåê Ng√¥n ng·ªØ ph√°t hi·ªán: <strong>${data.detectedLanguage.toUpperCase()}</strong></p>`;
    }
    
    // Hi·ªÉn th·ªã th√¥ng tin d·ªãch thu·∫≠t
    if (data.translationInfo) {
        html += `<p>üîÑ ${data.translationInfo}</p>`;
    }
    
    // N·∫øu kh√¥ng c√≥ th√¥ng tin g√¨
    if (!html) {
        html = '<p>Kh√¥ng c√≥ th√¥ng tin ng√¥n ng·ªØ.</p>';
    }
    
    languageInfo.innerHTML = html;
}

// ================================
// 8B. HI·ªÇN TH·ªä PII (M·ªöI - V2.0)
// ================================
function displayPII(data) {
    if (!piiContainer) return;
    
    const piiEntities = data.detectedPiiEntities || [];
    
    if (piiEntities.length === 0) {
        piiContainer.innerHTML = '<p>‚úÖ Kh√¥ng ph√°t hi·ªán th√¥ng tin c√° nh√¢n.</p>';
        return;
    }
    
    let html = '<div class="pii-warning">‚ö†Ô∏è ƒê√£ ph√°t hi·ªán th√¥ng tin c√° nh√¢n trong vƒÉn b·∫£n!</div>';
    html += '<div class="pii-list">';
    
    piiEntities.forEach(pii => {
        const score = (pii.score * 100).toFixed(0);
        html += `<span class="pii-tag">${pii.type} (${score}%)</span>`;
    });
    
    html += '</div>';
    
    // Hi·ªÉn th·ªã vƒÉn b·∫£n ƒë√£ che PII
    if (data.redactedEnglishText) {
        html += `
            <details style="margin-top: 15px;">
                <summary>üìÑ Xem vƒÉn b·∫£n ƒë√£ che th√¥ng tin c√° nh√¢n</summary>
                <pre>${escapeHtml(data.redactedEnglishText)}</pre>
            </details>
        `;
    }
    
    piiContainer.innerHTML = html;
}

// ================================
// 8C. HI·ªÇN TH·ªä SYNTAX (M·ªöI - V2.0)
// ================================
function displaySyntax(data) {
    if (!syntaxContainer) return;
    
    const syntax = data.syntaxAnalysis || [];
    
    if (syntax.length === 0) {
        syntaxContainer.innerHTML = '<p>Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch c√∫ ph√°p.</p>';
        return;
    }
    
    // Ch·ªâ l·∫•y 15 t·ª´ ƒë·∫ßu ƒë·ªÉ kh√¥ng qu√° d√†i
    const first15 = syntax.slice(0, 15);
    
    let html = '<div class="syntax-list">';
    first15.forEach(token => {
        html += `<span class="syntax-token"><strong>${escapeHtml(token.text)}</strong>: ${token.partOfSpeech}</span>`;
    });
    html += '</div>';
    
    if (syntax.length > 15) {
        html += `<p class="text-muted">... v√† ${syntax.length - 15} t·ª´ kh√°c</p>`;
    }
    
    syntaxContainer.innerHTML = html;
}

// ================================
// 8D. HI·ªÇN TH·ªä TOXICITY (M·ªöI - V2.0)
// ================================
function displayToxicity(data) {
    if (!toxicityContainer) return;
    
    const toxicity = data.toxicityAnalysis || [];
    
    if (toxicity.length === 0) {
        toxicityContainer.innerHTML = '<p>‚úÖ Kh√¥ng ph√°t hi·ªán n·ªôi dung ƒë·ªôc h·∫°i.</p>';
        return;
    }
    
    let html = '';
    toxicity.forEach(item => {
        const percentage = (item.Score * 100).toFixed(1);
        const severity = item.Score > 0.7 ? 'high' : item.Score > 0.4 ? 'medium' : 'low';
        
        html += `
            <div class="toxicity-item ${severity}">
                <span class="toxicity-label">${item.Name}</span>
                <div class="toxicity-bar">
                    <div class="toxicity-fill" style="width: ${percentage}%"></div>
                </div>
                <span class="toxicity-value">${percentage}%</span>
            </div>
        `;
    });
    
    toxicityContainer.innerHTML = html;
}

// ================================
// 9. UTILITY FUNCTIONS
// ================================

// L·∫•y sentiment score cao nh·∫•t
function getSentimentScore(scores, sentiment) {
    if (!scores) return 0;
    const key = sentiment.charAt(0).toUpperCase() + sentiment.slice(1).toLowerCase();
    return (scores[key] || 0) * 100;
}

// Animate s·ªë t·ª´ start ƒë·∫øn end
function animateNumber(element, start, end, duration) {
    const startTime = Date.now();
    const range = end - start;
    
    function update() {
        const now = Date.now();
        const elapsed = now - startTime;
        const progress = Math.min(elapsed / duration, 1);
        
        // Easing function (ease-out)
        const easeOut = 1 - Math.pow(1 - progress, 3);
        const current = Math.floor(start + range * easeOut);
        
        element.textContent = current;
        
        if (progress < 1) {
            requestAnimationFrame(update);
        } else {
            element.textContent = end;
        }
    }
    
    update();
}

// Escape HTML ƒë·ªÉ tr√°nh XSS
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// ================================
// 10. UI STATE MANAGEMENT
// ================================

// Hi·ªÉn th·ªã loading
function showLoading() {
    // Disable input v√† button
    textInput.disabled = true;
    analyzeButton.disabled = true;
    
    // ·∫®n results v√† errors
    resultsSection.classList.add('hidden');
    errorMessage.classList.add('hidden');
    
    // Hi·ªÉn th·ªã loading
    loadingMessage.classList.remove('hidden');
}

// Hi·ªÉn th·ªã error
function showError(message) {
    // ·∫®n loading
    loadingMessage.classList.add('hidden');
    
    // Enable l·∫°i input v√† button
    textInput.disabled = false;
    analyzeButton.disabled = false;
    
    // Hi·ªÉn th·ªã error message
    errorText.textContent = message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i.';
    errorMessage.classList.remove('hidden');
    
    // Scroll ƒë·∫øn error
    errorMessage.scrollIntoView({ behavior: 'smooth' });
}

// Reset app v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
function resetApp() {
    // Clear input
    textInput.value = '';
    imageInput.value = '';
    selectedFile = null;
    
    // Reset upload text n·∫øu c√≥
    const uploadText = document.querySelector('.upload-text');
    if (uploadText) {
        uploadText.textContent = 'Drag & drop image here';
        uploadText.style.color = '';
    }
    
    // Reset loading message
    loadingMessage.querySelector('p').textContent = 'Analyzing your content...';
    
    // ·∫®n results v√† errors
    resultsSection.classList.add('hidden');
    errorMessage.classList.add('hidden');
    loadingMessage.classList.add('hidden');
    
    // Enable input v√† button
    textInput.disabled = false;
    analyzeButton.disabled = false;
    
    // Focus v√†o input hi·ªán t·∫°i
    if (currentMode === 'text') {
        textInput.focus();
    }
    
    // Scroll l√™n ƒë·∫ßu
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

// ================================
// 11. KH·ªûI T·∫†O
// ================================
console.log('‚úÖ Sentiment Analysis App V2.0 initialized successfully!');
console.log('üí° Tip: Press Ctrl + Enter to analyze text quickly');
console.log('üÜï New features: Image analysis, PII detection, Toxicity analysis, Syntax analysis');
